services:
  dashboard:
    container_name: api-dashboard
    restart: unless-stopped
    build:
      context: ./dashboard
      dockerfile: Dockerfile.dashboard
    ports:
      - 6960:3000
      - 3000:3000
    environment:
      - DATABASE_URL:postgres://secura:password@db:5432/db
    env_file:
      - path: ./dashboard/.env
        required: true

  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile.Orchestrator
    container_name: test-orchestrator
    environment:
      - DATABASE_URL=postgres://secura:password@db:5432/db
      - PORT=3005
    ports:
      - 3005:3005

  tester:
    container_name: api-tester
    restart: always
    build:
      context: ./services/node
      dockerfile: Dockerfile.tester
    environment:
      - ZAP_API_URL=http://zap:8080
      - ZAP_API_KEY=JzUAuZDvoL3MNR/8yBDydTzK6ZACq9ONe8WfIY92J00= # random api key
      - ORCHESTRATOR_URL=http://orchestrator:3005
      - WAIT_TIME=3000
    depends_on:
      - zap

  zap:
    image: zaproxy/zap-stable
    user: zap
    ports:
      - 8080:8080
    command:
      [
        "zap.sh",
        "-daemon",
        "-host",
        "0.0.0.0",
        "-port",
        "8080",
        "-config",
        "api.disablekey=true",
        "-config",
        "api.addrs.addr.name=.*",
        "-config",
        "api.addrs.addr.regex=true",
      ]
    restart: unless-stopped

  db:
    container_name: db_secure
    image: postgres
    environment:
      POSTGRES_USER: secura
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    ports:
      - 5432:5432
    volumes:
      - postgres-secura:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-secura: